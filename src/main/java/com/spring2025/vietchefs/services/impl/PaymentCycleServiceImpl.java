package com.spring2025.vietchefs.services.impl;

import com.spring2025.vietchefs.models.entity.Booking;
import com.spring2025.vietchefs.models.entity.BookingDetail;
import com.spring2025.vietchefs.models.entity.PaymentCycle;
import com.spring2025.vietchefs.repositories.BookingDetailRepository;
import com.spring2025.vietchefs.repositories.PaymentCycleRepository;
import com.spring2025.vietchefs.services.PaymentCycleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
@Service
public class PaymentCycleServiceImpl implements PaymentCycleService {
    @Autowired
    private PaymentCycleRepository paymentCycleRepository;
    @Autowired
    private BookingDetailRepository bookingDetailRepository;

    @Override
    public void createPaymentCycles(Booking booking) {
        List<BookingDetail> details = bookingDetailRepository.findByBooking(booking);
        int numOfCycles = getNumOfCycles(booking);

        int detailsPerCycle = (int) Math.ceil((double) details.size() / numOfCycles);
        LocalDate firstPaymentDate = booking.getCreatedAt().toLocalDate().plusDays(1);

        for (int i = 0; i < numOfCycles; i++) {
            int startIdx = i * detailsPerCycle;
            int endIdx = Math.min(startIdx + detailsPerCycle, details.size());

            if (startIdx >= details.size()) break; // N·∫øu kh√¥ng c√≤n BookingDetail n√†o th√¨ d·ª´ng

            LocalDate startDate = details.get(startIdx).getSessionDate();
            LocalDate endDate = details.get(endIdx - 1).getSessionDate();

            // üîπ T√≠nh t·ªïng ti·ªÅn th·ª±c t·∫ø c·ªßa c√°c `BookingDetail` trong k·ª≥ n√†y
            BigDecimal adjustedCycleAmount = details.subList(startIdx, endIdx).stream()
                    .map(BookingDetail::getTotalPrice)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            PaymentCycle paymentCycle = new PaymentCycle();
            paymentCycle.setBooking(booking);
            paymentCycle.setCycleOrder(i + 1);
            paymentCycle.setAmountDue(adjustedCycleAmount); //  S·ªë ti·ªÅn th·ª±c t·∫ø
            paymentCycle.setStartDate(startDate);
            paymentCycle.setEndDate(endDate);
            paymentCycle.setDueDate(startDate.minusDays(2)); // H·∫°n thanh to√°n tr∆∞·ªõc 2 ng√†y
            paymentCycle.setStatus("PENDING");

            paymentCycleRepository.save(paymentCycle);
        }
    }

    @Override
    public void updatePaymentCycles(Booking booking) {
        List<BookingDetail> details = bookingDetailRepository.findByBooking(booking);
        List<PaymentCycle> paymentCycles = paymentCycleRepository.findByBookingOrderByCycleOrder(booking);

        int numOfCycles = paymentCycles.size();
        int detailsPerCycle = (int) Math.ceil((double) details.size() / numOfCycles);

        for (int i = 0; i < numOfCycles; i++) {
            int startIdx = i * detailsPerCycle;
            int endIdx = Math.min(startIdx + detailsPerCycle, details.size());

            if (startIdx >= details.size()) break;

            LocalDate newStartDate = details.get(startIdx).getSessionDate();
            LocalDate newEndDate = details.get(endIdx - 1).getSessionDate();
            BigDecimal newAmountDue = details.subList(startIdx, endIdx).stream()
                    .map(BookingDetail::getTotalPrice)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            PaymentCycle paymentCycle = paymentCycles.get(i);

            if (!"PAID".equals(paymentCycle.getStatus())) {
                paymentCycle.setStartDate(newStartDate);
                paymentCycle.setEndDate(newEndDate);
                paymentCycle.setAmountDue(newAmountDue);
                paymentCycle.setDueDate(newStartDate.minusDays(2));
                paymentCycleRepository.save(paymentCycle);
            }
        }
    }

    private int getNumOfCycles(Booking booking) {
        int durationDays = booking.getBookingPackage().getDurationDays();
        int numOfCycles;

        // üîπ X√°c ƒë·ªãnh s·ªë k·ª≥ thanh to√°n d·ª±a tr√™n th·ªùi gian c·ªßa package
        if (durationDays <= 7) {
            numOfCycles = 1; // Thanh to√°n 1 l·∫ßn
        } else if (durationDays <= 14) {
            numOfCycles = 2; // Thanh to√°n 2 l·∫ßn
        } else if (durationDays <= 30) {
            numOfCycles = 3; // Thanh to√°n m·ªói 10 ng√†y
        } else {
            numOfCycles = durationDays / 15; // M·ªói 15 ng√†y 1 l·∫ßn thanh to√°n
        }
        return numOfCycles;
    }
}
