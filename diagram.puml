@startuml
actor Customer
participant Controller
participant BookingDetailService
participant BookingDetailRepository
participant BookingRepository
participant WalletRepository
participant CustomerTransactionRepository
participant ChefTransactionRepository
participant NotificationService
participant ChefService
participant Database

Customer -> Controller : confirmBookingCompletionByCustomer(bookingDetailId, userId)
Controller -> BookingDetailService : confirmBookingCompletionByCustomer(bookingDetailId, userId)

BookingDetailService -> BookingDetailRepository : findById(bookingDetailId)
BookingDetailRepository -> Database : SELECT * FROM booking_details WHERE id = ?
Database --> BookingDetailRepository : BookingDetail
BookingDetailRepository --> BookingDetailService : BookingDetail

BookingDetailService -> BookingDetailService : Kiểm tra quyền và trạng thái

BookingDetailService -> BookingDetailRepository : save(BookingDetail - status: COMPLETED)
BookingDetailRepository -> Database : UPDATE booking_details SET status='COMPLETED'
Database --> BookingDetailRepository : BookingDetail
BookingDetailRepository --> BookingDetailService : BookingDetail

alt bookingType == "SINGLE"
    BookingDetailService -> BookingRepository : save(Booking - status: COMPLETED)
    BookingRepository -> Database : UPDATE bookings SET status='COMPLETED'
    Database --> BookingRepository : Booking
    BookingRepository --> BookingDetailService : Booking
    BookingDetailService -> NotificationService : sendPushNotification(to Customer)
else
    BookingDetailService -> BookingDetailRepository : findByBookingId(bookingId)
    BookingDetailRepository -> Database : SELECT * FROM booking_details WHERE booking_id = ?
    Database --> BookingDetailRepository : List<BookingDetail>
    BookingDetailRepository --> BookingDetailService : List<BookingDetail>

    BookingDetailService -> BookingDetailService : Kiểm tra tất cả các BookingDetail đã COMPLETED

    alt Nếu đã hoàn tất và có depositPaid > 0
        BookingDetailService -> WalletRepository : findByUserId(userId)
        WalletRepository -> Database : SELECT * FROM wallets WHERE user_id = ?
        Database --> WalletRepository : Wallet
        WalletRepository --> BookingDetailService : Wallet

        BookingDetailService -> WalletRepository : save(Wallet - hoàn tiền)
        WalletRepository -> Database : UPDATE wallets SET balance = ...
        Database --> WalletRepository : Wallet

        BookingDetailService -> CustomerTransactionRepository : save(Refund Transaction)
        CustomerTransactionRepository -> Database : INSERT INTO customer_transactions ...
        Database --> CustomerTransactionRepository : OK

        BookingDetailService -> NotificationService : sendPushNotification(to Customer - Refund)
    end

    BookingDetailService -> BookingRepository : save(Booking - status: COMPLETED)
    BookingRepository -> Database : UPDATE bookings SET status = 'COMPLETED'
    Database --> BookingRepository : Booking
    BookingRepository --> BookingDetailService : Booking
end

BookingDetailService -> WalletRepository : findByUserId(chef.userId)
WalletRepository -> Database : SELECT * FROM wallets WHERE user_id = ?
Database --> WalletRepository : Wallet
WalletRepository --> BookingDetailService : Wallet

BookingDetailService -> WalletRepository : save(Wallet - cộng tiền)
WalletRepository -> Database : UPDATE wallets SET balance = ...
Database --> WalletRepository : Wallet

BookingDetailService -> ChefTransactionRepository : save(ChefTransaction)
ChefTransactionRepository -> Database : INSERT INTO chef_transactions ...
Database --> ChefTransactionRepository : OK

BookingDetailService -> NotificationService : sendPushNotification(to Chef)
BookingDetailService -> ChefService : updateReputation(chef, +3)

BookingDetailService --> Controller : BookingDetailDto
Controller --> Customer : Trả về BookingDetailDto
@enduml
