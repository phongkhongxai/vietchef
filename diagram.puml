@startuml
title Sequence Diagram: Cancel Single Booking

actor Customer
participant "BookingService" as Service
participant "BookingRepository" as BookingRepo
participant "UserRepository" as UserRepo
participant "BookingDetailRepository" as DetailRepo
participant "CustomerTransactionRepository" as TransactionRepo
participant "WalletRepository" as WalletRepo
participant "NotificationService" as Notification
participant "ModelMapper" as Mapper

Customer -> Service : cancelSingleBooking(bookingId, userId)
Service -> BookingRepo : findById(bookingId)
BookingRepo --> Service : Booking

Service -> UserRepo : findById(userId)
UserRepo --> Service : User

Service -> DetailRepo : findByBookingId(bookingId)
DetailRepo --> Service : List<BookingDetail>

alt Booking.status == "CONFIRMED" && sessionDate < today + 1
    Service --> Customer : throw "Cannot cancel booking"
else Booking.status == "PENDING"
    Service -> DetailRepo : save(bookingDetail.setStatus("CANCELED"))
    Service -> BookingRepo : save(booking.setStatus("CANCELED"))
    Service -> Mapper : map(Booking, BookingResponseDto)
    Mapper --> Service : BookingResponseDto
    Service --> Customer : return BookingResponseDto
else Booking.status in ("PAID", "CONFIRMED")
    Service -> TransactionRepo : findByBookingIdAndTransactionType(...)
    TransactionRepo --> Service : List<CustomerTransaction>

    alt hasRefund
        Service -> TransactionRepo : existsByBookingIdAndTransactionType(...)
        TransactionRepo --> Service : true
        Service --> Customer : throw "Booking already refunded"
    else
        Service -> WalletRepo : save(wallet.add(refundAmount))
        Service -> TransactionRepo : save(RefundTransaction)
        Service -> DetailRepo : save(bookingDetail.setStatus("REFUNDED"))
    end

    Service -> BookingRepo : save(booking.setStatus("CANCELED"))

    alt booking was "CONFIRMED"
        Service -> Notification : sendPushNotification(to chef)
    end

    Service -> Mapper : map(Booking, BookingResponseDto)
    Mapper --> Service : BookingResponseDto
    Service --> Customer : return BookingResponseDto
end

@enduml
